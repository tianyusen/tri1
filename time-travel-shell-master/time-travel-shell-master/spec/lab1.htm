<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Lab 1. Time travel shell</title>
<link rel="copyright" href="http://www.cs.ucla.edu/classes/spring13/cs111/copyright.html">
<link rev="made" href="mailto:eggert@cs.ucla.edu">
</head>

<body>

<h1>Lab 1. Time travel shell</h1>

<h2>Introduction</h2>

<p>You are a programmer for Big Data Systems, Inc., a company that
specializes in large backend systems that analyze
<a href="http://en.wikipedia.org/wiki/Big_data">big data</a>. Much of
BDS's computation occurs in a cloud or a grid. Computational nodes are cheap
<a href="http://en.wikipedia.org/wiki/Symmetric_multiprocessing">SMP</a>
hosts with a relatively small number of processors. Nodes typically
run simple shell scripts as part of the larger computation, and you've
been assigned the job of speeding up these scripts.</p>

<p>Many of the shell scripts have command sequences that look like the
following (though the actual commands are proprietary):</p>

<pre><samp>  sort &lt; a | cat b - | tr A-Z a-z &gt; c
  sort -k2 d - &lt; a | uniq -c &gt; e
  diff a c &gt; f
</samp></pre>

<p>In this example, the
standard <a href="http://pubs.opengroup.org/onlinepubs/9699919799/">POSIX</a>
shell executes the code serially: it waits for the command in the
first line to finish before starting the command in the second
line. Your goal is to speed this up by running commands in parallel
when it is safe to do so. In this example, it is safe to start running
the second command before the first has finished, because the second
command does not read any file that the first command writes. However,
the third command cannot be started until the first command finishes,
because the first command writes a file <samp>c</samp> that the third
command reads.</p>

<p>Your goal is to write a prototype for a shell that runs code like
the above considerably faster than standard shells do, by exploiting
the abovementioned parallelism. If this prototype works well, the idea
is that you'll later (i.e., after CS 111 is over...) improve the
prototype until it is production quality.</p>

<p>To simplify things, your prototype needs to exploit parallelism
only at the top level, such as in the examples shown above. It need
not parallelize subcommands. For example, it is OK if your prototype
executes the following commands in sequence without parallelizing
them, because all the commands are subsidiary to the parentheses
at the top level:</p>

<pre><samp>  (sort &lt; a | cat b - | tr A-Z a-z &gt; c
   sort -k2 d - &lt; a | uniq -c &gt; e
   diff a c &gt; f)
</samp></pre>

<p>Your company's shell scripts all follow some simple rules which
should make the prototype easier to write:</p>

<ul>
<li>They limit themselves to a small subset of the shell syntax,
described in "<a href="#syntax">Shell syntax subset</a>" below.</li>
<li>Simple commands in scripts have limited behavior, described
in "<a href="#behavior">Time travel limitations on computations</a>" below.</li>
<li>They don't care about some properties of your implementation,
and will work regardless of how your implementation behaves in these
areas, as described in "<a href="#dontcare">Don't care behaviors</a>" below.
</li></ul>
<p>Your implementation will take three phases:</p><p>
</p><ul>
<li>In Lab 1a, you'll warm up by implementing just the shell's command
reader. This shell will support a <samp>-p</samp> option, so that the command
"<samp>timetrash -p script.sh</samp>" will read the shell commands in
the file <samp>script.sh</samp> and output them in a standard format
that is already supplied by a code skeleton available on CourseWeb;
sample output is in the skeleton's test
script <samp>test-p-ok.sh</samp>.</li>
<li>In Lab 1b, you'll implement the standard execution model for your
shell subset. Once this is done, the command "<samp>timetrash
script.sh</samp>" should behave like the standard command "<samp>sh
script.sh</samp>", assuming <samp>script.sh</samp> is in the shell
subset described in this assignment.
</li><li>In Lab 1c, you'll implement the time-traveling execution model,
which allows extra parallelism. Once this is done, the command
"<samp>timetrash -t script.sh</samp>" should execute the script faster
than the standard shell does, if the script has enough inherent
parallelism.</li>
</ul>

<h2>Implementation</h2>

<p>A skeleton implementation will be given to you on CourseWeb.
It comes with a makefile that supports the following actions.
Your solution should have similar actions in its makefile.</p>

<ul>
<li>"<samp>make</samp>" builds the <samp>timetrash</samp> program.</li>
<li>"<samp>make clean</samp>" removes the program and all other temporary files
and object files that can be regenerated with "<samp>make</samp>".</li>
<li>"<samp>make check</samp>" tests the <samp>timetrash</samp> program
on the available test cases. The initial test cases are just for Lab
1a, and they fail on the skeleton code because the skeleton code
doesn't do anything useful. Your program should succeed on them. For
Lab 1b and 1c, you should add two test cases each, in the same style
as the existing cases for 1a.</li>
<li>"<samp>make dist</samp>" makes a software distribution
tarball <samp>lab1-<var>yourname</var>.tar.gz</samp> and does some simple
testing on it. This tarball is what you should submit via CourseWeb.</li>
</ul>

<p>Your solution should be written in the C programming language. Stick
with the programming style used in the skeleton, which uses standard
<a href="http://www.gnu.org/prep/standards/html_node/Writing-C.html">GNU style for C</a>. Your code should be <a href="http://www.gnu.org/prep/standards/html_node/Semantics.html">robust</a>, for example, it should not impose an arbitrary
limit like 2<sup>16</sup> bytes on the length of a token. You
may use the features
of <a href="http://en.wikipedia.org/wiki/C11_%28C_standard_revision%29">C11</a>
as implemented on the SEASnet GNU/Linux servers. Please prepend the
directory <samp>/usr/local/cs/bin</samp> to your PATH, to get the
versions of the tools that we will use to test your solution. Your
solution should stick to the
standard <a href="http://www.gnu.org/software/libc/">GNU C library</a>
that is installed on SEASnet, and should not rely on other
libraries.</p>

<p>You can run your program directly by invoking, for example,
<samp>./timetrash -p foo</samp>. Eventually, you should put your own
test cases into a file <samp>test<var>something</var>.sh</samp> so
that it is automatically run as part of "<samp>make check</samp>".</p>

<h2>More details on syntax and semantics of the shell subset</h2>

<p>The "time travel" feature of your shell is feasible partly because
of the restricted subset of the shell that you need to implement.
Also, for this assignment, the shell has been simplified further so as
to avoid some work that can be deferred until a production version.</p>

<h3 id="syntax">Shell syntax subset</h3>

<p>Your implementation of the shell needs to support only the
following small subset of the
standard <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_10">POSIX shell
grammar</a>:</p>

<ul>
<li>Words, consisting of a maximal sequence of one or more
adjacent characters that are ASCII letters (either upper or lower
case), digits, or any of: <samp>! % + , - . / : @ ^ _</samp></li>

<li>The following eight special tokens: <samp>; | &amp;&amp; || ( ) &lt;
&gt;</samp></li>

<li>Simple commands, which are sequences of one or more words. The
first word is the file to be executed.</li>

<li>Subshells, which are complete commands surrounded by <samp>( )</samp>.</li>

<li>Commands, which are simple commands or subshells followed by I/O
redirections. An I/O redirection is possibly empty,
or <samp>&lt;</samp> followed by a word, or
<samp>&gt;</samp> followed by a word, or <samp>&lt;</samp> followed by
a word followed by <samp>&gt;</samp> followed by a word.</li>

<li>Pipelines, which are one or more commands separated
by <samp>|</samp>.</li>

<li>And-ors, which are one or more commands separated
by <samp>&amp;&amp;</samp>
or <samp>||</samp>. The <samp>&amp;&amp;</samp> and <samp>||</samp>
operators are left-associative and have the same operator
precedence.</li>

<li>Complete commands, which are one or more and-ors each separated by
a semicolon or newline, and which are optionally followed by a
semicolon. An entire shell script is a complete command.</li>

<li>Comments, each consisting of a <samp>#</samp> that is not
immediately preceded by an ordinary token, followed by characters up
to (but not including) the next newline.</li>

<li>White space consisting of space, tab, and newline. Newline is
special: as described above, it can substitute for semicolon. Also,
although white space can ordinarily appear before and after any token,
the only tokens that newlines can appear before are <samp>(</samp>,
<samp>)</samp>, and the first words of simple commands.
Newlines may follow any special token other than <samp>&lt;</samp>
and <samp>&gt;</samp>.</li>
</ul>

<p>If your shell's input does not fall within the above subset, your
implementation should output to stderr a syntax error message that
starts with the line number and a colon, and should then exit.</p>

<p>Your implementation can have undefined behavior if any of the
following features are used. In other words, our test cases won't use
these features and your program need not diagnose an error if these
features are used.</p><p>

</p><ul>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_04">Shell
reserved words</a> such as <samp>!</samp>, <samp>{</samp>, <samp>if</samp>,
and <samp>function</samp>, when used as the first word of a command.</li>
<li>Commands that
invoke <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_14">special
built-in utilities</a> such as <samp>break</samp>, <samp>.</samp>,
and <samp>exit</samp>. Exception: your implementation should support
the special-builtin
utility <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#exec"><samp>exec</samp></a>
with a command and optional arguments (you need not
support <samp>exec</samp> without a command).</li>
<li>A token consisting entirely of digits, immediately
before <samp>&lt;</samp> or <samp>&gt;</samp> (for
example, as in the command "<samp>cat 2&gt;/dev/null</samp>").</li>
<li>Two adjacent left parentheses <samp>((</samp> – see
<a href="http://pubs.opengroup.org/onlinepubs/007904875/xrat/xcu_chap02.html#tag_02_02_03">Token Recognition</a> for why.
</li></ul>

<h3 id="behavior">Time travel limitations on computations</h3>

<p>Your implementation of the shell, when it is run in time-travel
mode, can have undefined behavior if any of the following limitations
are violated. When your shell is run in normal mode, it should not
impose these limitations.</p>

<ul>
<li>Simple commands read only from standard input or from files whose
names are one of the words of the command. For example, the simple
command "<samp>./doit -f x nobody@gmail.com</samp>" reads at most from
standard input and from the files <samp>./doit</samp>,
<samp>-f</samp>, <samp>x</samp>, and <samp>nobody@gmail.com</samp>,
if these files exist.</li>
<li>The computation never accesses the same file via two different
names. For example, if the computation uses the file
name <samp>./doit</samp> and the file name <samp>doit</samp> without
the leading "<samp>./</samp>", the behavior is undefined.
</li><li>Simple commands write only to standard output, to standard error,
or to files that are never otherwise accessed by the computation. For
example, the <samp>mv</samp> and <samp>rm</samp> commands cannot be
used to mess up dependency checking, because they can cause dependency
problems only by modifying directories that are later searched.</li>
</ul>

<h3 id="dontcare">Don't care behaviors</h3>

<p>Similarly, in some cases, your company's scripts don't care how your
implementation behaves, and it's OK for it to depart from established
semantics when it is run in time-travel mode.</p>

<ul>
<li>It is OK if commands behave as if the time of day jumps around at
random. For example, it is OK if "<samp>(date &gt;A; date &gt;B)</samp>"
puts an earlier time stamp into <samp>B</samp> than
into <samp>A</samp>. It is this property of your implementation that
prompts the nickname "time travel shell".</li>

<li>If a set of commands all read from standard input, or write to
standard output or standard error, and have no other dependencies that
interfere with each other, your implementation can run them in
parallel and interleave their reads and writes arbitrarily. For
example, "<samp>tr A B; tr A C</samp>" can run two instances
of <samp><a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/tr.html">tr</a></samp>
in parallel, both reading from standard input and writing to standard
output; the combination somewhat-randomly transforms some As to Bs and
other As to Cs as it copies input to output and it does not
necessarily output blocks in the same order that they were input.</li>
</ul>

<p>You can simplify your shell in one other way, regardless of whether
it is run in time-travel mode:</p>

<ul>
<li>It is OK if your shell attempts to execute the following commands
as regular commands, finding them via the PATH environment variable
and running them as executables in a separate child process, even if
the commands do not exist in the PATH, and even though POSIX does not
allow this behavior:
<samp>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/false.html">false</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/fc.html">fc</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/fg.html">fg</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html">getopts</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/jobs.html">jobs</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/kill.html">kill</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/newgrp.html">newgrp</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pwd.html">pwd</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/read.html">read</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/true.html">true</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/umask.html">umask</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/unalias.html">unalias</a>
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/wait.html">wait</a>
</samp>
</li>

</ul>

<h2>Submit</h2>

<p>After you implement Lab 1a, submit via CourseWeb
the <samp>.tar.gz</samp> file that is built by "<samp>make
dist</samp>". Similarly for 1b and 1c. Your submission should contain
a README file that briefly describes known limitations of your code
and any extra features you'd like to call our attention to.</p>

<p>We will check your work on each lab part by running it on the
SEASnet GNU/Linux servers, so make sure they work on there. Lab 1 parts
are due at different times, but we will not grade each part
separately; the lab grade is determined by your overall work on all
three parts.</p>

<hr>
<address>
 © 2013 <a href="http://www.cs.ucla.edu/classes/spring13/cs111/copyright.html">copyright rules</a>
</address>



</body></html>
